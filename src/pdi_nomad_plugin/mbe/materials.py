from nomad.config import config
from nomad.datamodel.data import EntryData
from nomad.datamodel.metainfo.annotations import (
    ELNAnnotation,
    ELNComponentEnum,
    SectionProperties,
)
from nomad.datamodel.metainfo.basesections import (
    CompositeSystemReference,
)
from nomad.metainfo import (
    Datetime,
    MEnum,
    Quantity,
    SchemaPackage,
    Section,
    SubSection,
)
from nomad.utils import hash
from nomad_material_processing.general import (
    CrystallineSubstrate,
    ThinFilm,
    ThinFilmStack,
    ThinFilmStackReference,
)
from structlog.stdlib import (
    BoundLogger,
)

from pdi_nomad_plugin.general.schema import (
    PDIMBECategory,
    SystemPDI,
)
from pdi_nomad_plugin.utils import (
    create_archive,
)

configuration = config.get_plugin_entry_point('pdi_nomad_plugin.mbe:materials_schema')

m_package = SchemaPackage()


class SubstrateMbe(CrystallineSubstrate, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        label_quantity='lab_id',
        categories=[PDIMBECategory],
        label='Substrate',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'tags',
                    'delivery_date',
                    'as_delivered',
                    'fresh',
                    'processed',
                    'grown',
                    'datetime',
                    'supplier',
                    'supplier_id',
                    'crystal_id',
                    'charge_id',
                    'polishing',
                    'lab_id',
                    'epi_ready',
                    'substrate_image',
                    'information_sheet',
                    'description',
                ],
            ),
            lane_width='600px',
        ),
    )
    tags = Quantity(
        type=str,
        shape=['*'],
        description='Searchable tags for this entry. Use Explore tab for searching.',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
        ),
    )
    delivery_date = Quantity(
        type=Datetime,
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.DateEditQuantity,
        ),
    )
    as_delivered = Quantity(
        type=bool,
        description='Sample is in the same condition as it was delivered',
        a_eln=ELNAnnotation(
            component='BoolEditQuantity',
        ),
    )
    fresh = Quantity(
        type=bool,
        description='Sample is fresh and has not been used',
        a_eln=ELNAnnotation(
            component='BoolEditQuantity',
        ),
    )
    processed = Quantity(
        type=bool,
        description='Sample underwent some processing such as etching, annealing, etc.',
        a_eln=ELNAnnotation(
            component='BoolEditQuantity',
        ),
    )
    grown = Quantity(
        type=bool,
        description='Sample underwent vapor deposition',
        a_eln=ELNAnnotation(
            component='BoolEditQuantity',
        ),
    )
    crystal_id = Quantity(
        type=str,
        description='The ID of the crystal from which the current batch was cut, given by the manufacturer.',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
        ),
        label='Crystal ID',
    )
    charge_id = Quantity(
        type=str,
        description='The ID of the charge, or polishing batch, given by the manufacturer.',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Charge ID',
        ),
    )
    polishing = Quantity(
        type=MEnum(
            'Single-side',
            'Double-side',
            'other',
            'none',
        ),
        description='The polishing applied to the material.',
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.EnumEditQuantity,
        ),
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Notes',
        ),
    )

    def normalize(self, archive, logger):
        super().normalize(archive, logger)

        if (
            self.supplier_id is not None
            and self.crystal_id is not None
            and self.charge_id is not None
            and self.lab_id is None
        ):
            self.lab_id = f'{self.supplier_id}_{self.crystal_id}_{self.charge_id}'
        elif (
            self.supplier_id is not None
            and self.crystal_id is not None
            and self.charge_id is not None
            and self.lab_id is not None
        ):
            logger.warning(
                "Error in SubstrateBatch: 'Substrate ID' is already given:\n"
                'supplier_id, charge_id, crystal_id are not used to compose it.'
            )
        elif (
            self.supplier_id is None
            and self.crystal_id is None
            and self.charge_id is None
            and self.lab_id is None
        ):
            logger.error(
                "Error in SubstrateBatch: 'Substrate ID' expected, but None found.\n"
                "Please provide 'supplier_id', 'crystal_id', and 'charge_id',"
                " or 'Substrate ID'."
            )


class SubstrateBatchMbe(SubstrateMbe, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        label_quantity='lab_id',
        categories=[PDIMBECategory],
        label='Substrate Batch',
        a_eln=ELNAnnotation(
            properties=SectionProperties(
                order=[
                    'name',
                    'delivery_date',
                    'datetime',
                    'supplier',
                    'supplier_id',
                    'crystal_id',
                    'charge_id',
                    'polishing',
                    'lab_id',
                    'number_of_substrates',
                    'epi_ready',
                    'substrate_image',
                    'information_sheet',
                    'description',
                ],
            ),
            lane_width='600px',
        ),
    )
    number_of_substrates = Quantity(
        type=int,
        description='The number of substrates in the batch.',
        a_eln=dict(component='NumberEditQuantity'),
    )
    substrates = SubSection(
        description="""
        The substrates in the batch.
        """,
        section_def=CompositeSystemReference,
        repeats=True,
    )

    def normalize(self, archive, logger):
        from nomad.datamodel import EntryArchive, EntryMetadata

        super().normalize(archive, logger)
        filetype = 'yaml'

        # if (
        #     self.supplier_id is not None
        #     and self.crystal_id is not None
        #     and self.charge_id is not None
        #     and self.lab_id is None
        # ):
        #     self.lab_id = f'{self.supplier_id}_{self.crystal_id}_{self.charge_id}'
        # elif (
        #     self.supplier_id is not None
        #     and self.crystal_id is not None
        #     and self.charge_id is not None
        #     and self.lab_id is not None
        # ):
        #     logger.warning(f"Error in SubstrateBatch: 'Substrate ID' is already given.")
        # elif (
        #     self.supplier_id is None
        #     and self.crystal_id is None
        #     and self.charge_id is None
        #     and self.lab_id is None
        # ):
        #     logger.error(
        #         f"Error in SubstrateBatch: 'Substrate ID' expected, but None found.\n"
        #         f"Please provide 'supplier_id', 'crystal_id', 'charge_id' and 'lab_id'."
        #     )

        if not self.number_of_substrates:
            logger.error(
                "Error in SubstrateBatch: 'number_of_substrates' expected, but None found."
            )
        if self.substrates:
            logger.error(
                f'Error in SubstrateBatch: No substrates expected,'
                f' but {len(self.substrates)} substrates given.'
                f' Remove the substrates and save again to generate substrates.'
            )
        generated_substrates = []
        if self.number_of_substrates:
            substrate_object = self.m_copy(deep=True)
            substrate_object.m_def = SubstrateMbe.m_def
            substrate_object.number_of_substrates = None
            for substrate_index in range(1, self.number_of_substrates + 1):
                child_name = self.lab_id if self.lab_id else self.name
                substrate_filename = (
                    f'{child_name}_{substrate_index}.Substrate.archive.{filetype}'
                )
                substrate_object.name = f'{child_name}_{substrate_index}'
                substrate_object.lab_id = f'{child_name}_{substrate_index}'
                substrate_archive = EntryArchive(
                    data=substrate_object,
                    m_context=archive.m_context,
                    metadata=EntryMetadata(upload_id=archive.m_context.upload_id),
                )
                create_archive(
                    substrate_archive.m_to_dict(),
                    archive.m_context,
                    substrate_filename,
                    filetype,
                    logger,
                )
                generated_substrates.append(
                    CompositeSystemReference(
                        name=substrate_object.name,
                        reference=f'../uploads/{archive.m_context.upload_id}/archive/{hash(archive.m_context.upload_id, substrate_filename)}#data',
                    ),
                )
            self.substrates = generated_substrates


class ThinFilmMbe(SystemPDI, ThinFilm, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        label_quantity='lab_id',
        categories=[PDIMBECategory],
        label='ThinFilmMbe',
    )
    lab_id = Quantity(
        type=str,
        description='the Sample created in the current growth',
        a_tabular={'name': 'GrowthRun/Sample Name'},
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )
    tags = Quantity(
        type=str,
        shape=['*'],
        description='Searchable tags for this entry. Use Explore tab for searching.',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
        ),
    )
    test_quantities = Quantity(
        type=str,
        description='Test quantity',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
        ),
    )


class ThinFilmStackMbePDI(SystemPDI, ThinFilmStack, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        label_quantity='lab_id',
        categories=[PDIMBECategory],
        label='ThinFilmStackMbe',
    )
    lab_id = Quantity(
        type=str,
        description='the Sample created in the current growth',
        a_tabular={'name': 'GrowthRun/Sample Name'},
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )
    tags = Quantity(
        type=str,
        shape=['*'],
        description='Searchable tags for this entry. Use Explore tab for searching.',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
        ),
    )
    parent_sample = SubSection(
        description="""
        the parent sample of the current sample.
        """,
        section_def=ThinFilmStackReference,
    )


class ThinFilmStackMbeReference(ThinFilmStackReference):
    """
    A section used for referencing a Grown Sample.
    """

    lab_id = Quantity(
        type=str,
        description='the Sample created in the current growth',
        a_tabular={'name': 'GrowthRun/Sample Name'},
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Grown Sample ID',
        ),
    )
    reference = Quantity(
        type=ThinFilmStackMbePDI,
        description='A reference to a NOMAD `ThinFilmStackMbe` entry.',
        a_eln=ELNAnnotation(
            component='ReferenceEditQuantity',
            label='ThinFilmStackMbe Reference',
        ),
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        """
        The normalizer for the `ThinFilmStackMbeReference` class.
        """
        super().normalize(archive, logger)


m_package.__init_metainfo__()
